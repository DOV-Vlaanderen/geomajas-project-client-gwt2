<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter-java-howto">
  <title>How-to</title>

  <para>This chapter shows how to work with the <code>GeometryEditable</code>
  interface.</para>

  <section>
    <title>How to create and store <code>GeometryEditable</code>
    objects</title>

    <para>You will need to define a custom
    <code>AbstractGraphicsObjectContainer</code> to store the created graphics
    objects.</para>

    <programlisting>// e.g. in onMapInitialized method:
annotationContainer = new AbstractGraphicsObjectContainer(eventBus);  // this will have to be an implementation!
annotationContainer.setRootContainer(mapPresenter.getContainerManager().addWorldContainer());</programlisting>

    <para>Only objects that have <code>GeometryEditable</code> role will
    display the <code>EditAction</code> in their cog dropdown menu. There is a
    default implementation for creating editable polygons and lines. This is
    done using the <code>CreateLineController</code> and
    <code>CreatePolygonController</code>, that will alow you to create line or
    polyogon point-by-point, ending in a double click. If you use a button to
    indicate the start of the creation process (like in the screenshot in the
    introduction), this is how you can link a controller to it:</para>

    <programlisting>public void onActionPerformed(.... ) { // e.g. when button is clicked
   graphicsService.start();
   createController = new CreatePolygonController(graphicsService, mapPresenter); // or anothor controller
   graphicsService.getMetaController().setActive(false);
   createController.setActive(true);
}</programlisting>

    <para>When the object has been created, it is automatically added to the
    <code>AbstractGraphicsObjectContainer</code>. You will need to listen to
    the <code>GraphicsObjectContainerEvent</code> that the container throws to
    change the active controller.</para>

    <programlisting>// e.g. in onMapInitialized method:
annotationContainer.addGraphicsObjectContainerHandler(this); // this will ensure automatic registration of created graphics objects
...
public void onAction(GraphicsObjectContainerEvent event) {  // method of GraphicsObjectContainerEvent.Handler
   createController.setActive(false);
   graphicsService.getMetaController().setActive(true);
}</programlisting>
  </section>

  <section>
    <title>How to registrate the <code>EditAction</code> in the cog
    menu</title>

    <para>The editing action is registered as any other action, in the
    <code>PopupMenuControllerFactory</code>. The actions registered in the
    <code>PopupMenuControllerFactory</code> are shown in the cog dropdown
    menu.</para>

    <programlisting>PopupMenuControllerFactory popupFactory = new PopupMenuControllerFactory(new PopupMenuFactory(), 1.3, 1.3);
popupFactory.registerAction(new EditAction(mapPresenter)); // registration of the editing action
... // register other actions or editors
graphicsService.registerControllerFactory(popupFactory);</programlisting>
  </section>

  <section>
    <title>How to create custom <code>GeometryEditable</code> objects</title>

    <para>You will need to perfom the follwing:</para>

    <itemizedlist>
      <listitem>
        <para>Create the object that has the GeometryEditable role . See
        Graphics projects documentation for the how-to on this. Inspiration:
        <code>GGeometryPath</code>.</para>
      </listitem>

      <listitem>
        <para>Create a controller for the creation of the object extending
        <code>AbstractGraphicsController</code>. It will define what actions
        to perform when the controller is activated. Inspiration:
        <code>CreateLineController</code> and
        <code>CreatePolygonController.</code></para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>How to create a custum action</title>

    <para>This is related to the documentation of the Graphics Project.</para>

    <para>You will need te following:</para>

    <itemizedlist>
      <listitem>
        <para>An action class. Inspiration: <code>EditAction.</code></para>
      </listitem>

      <listitem>
        <para><code></code></para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
